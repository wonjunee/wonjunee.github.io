<div class="container bg-3 text-left">
    <h3>Week2</h3>  
</div>

<div class=empty-row-1> </div>

<div class="container bg-3 text-left">
    <h3>Tuesday</h3>
    <h4>About pointers</h4>

<!-- ---------------------------- -->
<h5>Link to the video</h5>
<!-- <p >Enter password: <input id='password' type='text'  /> <a href="math.ucla.edu/~wlee" onclick="javascript:return validatePass()">Enter</a> </p> <button type="button" class="btn btn-primary" onclick="location.href='./../';">Home</button> -->
<p >Enter password: <input id='passwordW2_1' type='text'  /> <button type="button" class="btn btn-primary" onclick="javascript:return validatePassW2_1()">Enter</button>
<script>
function validatePassW2_1(){
    if(document.getElementById('passwordW2_1').value == 'brav0'){
        open('https://youtu.be/bvwZptHAZd8')
        return true;
    }else{
        alert('wrong password!!');
        return false;
    }
}
</script>



<!-- ---------------------------- -->

</div>


<!-- ------------------------------------------------------------------------------------ -->


<div class="container bg-3 text-left">
    <div class="row">
    
        <div class="col-sm-1"></div>

        <div class="col-sm-10">

            <pre class="prettyprint lang-cpp" style="font-size: 8.5pt;">
#include < iostream >

using namespace std;

int main()
{
  int a = 54;
  int b = a;

  cout << a << " " << b << endl; // will print out 54 54

  b = 12;

  cout << a << " " << b << endl; // will print out 54 12 -> change of b doesn't affect a
}
            </pre>

            <pre class="prettyprint lang-cpp" style="font-size: 8.5pt;">
#include < iostream >

using namespace std;

int main()
{
  int a = 54;
  int *b = & a; // b is a pointer pointing to a

  cout << a << " " << *b << endl; // will print out 54 54

  *b = 12;

  cout << a << " " << b << endl; // will print out 12 12 -> change of b affects a
}
            </pre>
        </div>

        <div class="col-sm-1"></div>
    </div>
</div>

<div class=empty-row-1> </div>


<div class="container bg-3 text-left">
    <div class="row">
    
        <div class="col-sm-1"></div>

        <div class="col-sm-10">

            <pre class="prettyprint lang-cpp" style="font-size: 8.5pt;">
#include < iostream >

using namespace std;


double maximum(const double* a, int a_size)
{
  if(a_size==0) return 0;

  double highest = *a;
  const double* p = a+1;
  int count = a_size - 1;

  while(count > 0)
  {
    if(*p > highest) highest = *p;

    p++;
    count--;
  }
  return highest;
}

int main()
{
  int a_size = 10;
  double a[] = {2,4,6,8,10,1,3,5,7,9};

  // This for loop will print out all the items in an array a
  for(int i = 0; i < a_size; ++i)
  {
    cout << *(a+i) << " ";
  }
  cout << endl;
  
  cout << "The maximum is " << maximum(a,a_size) << endl; // will print out 10
}
            </pre>
        </div>

        <div class="col-sm-1"></div>
    </div>
</div>




<div class=empty-row-1> </div>




<div class="container bg-3 text-left">
    <h3>Thursday</h3>
    <h4>Problems from Chapter 7: Pointers</h4>

<!-- ---------------------------- -->
<h5>Link to the video</h5>
<!-- <p >Enter password: <input id='password' type='text'  /> <a href="math.ucla.edu/~wlee" onclick="javascript:return validatePass()">Enter</a> </p> <button type="button" class="btn btn-primary" onclick="location.href='./../';">Home</button> -->
<p >Enter password: <input id='passwordW2_2' type='text'  /> <button type="button" class="btn btn-primary" onclick="javascript:return validatePassW2_2()">Enter</button>
<script>
function validatePassW2_2 (){
    if(document.getElementById('passwordW2_2').value == 'brav0'){
        open('https://youtu.be/TYipREn67Fk');
        return true;
    }else{
        alert('wrong password!!');
        return false;
    }
}
</script>



<!-- ---------------------------- -->

</div>


<!-- ------------------------------------------------------------------------------------ -->


<div class="container bg-3 text-left">
    <div class="row">
    
        <div class="col-sm-1"></div>

        <div class="col-sm-10">


            <h5>Exercise P7.1 from the textbook</h5>
            <p>Implement a class <b>Person</b> with the following fields:</p>
            <ul>
                <li>the name</li>
                <li>a pointer to the person's best friend (a Person*)</li>
                <li>a popularity counter that indicates how many other people have this person as their best friend</li>
            </ul>
            <p>Write a program that reads in a list of names, allocates a <b>new Person</b> for each of them, and stores them in a <b>vector&#60;Person*&#62;</b>. Then ask the name of the best friend for each of the <b>Person</b> objects. Locate the object matching the friend's name and call a <b>set_best_friend</b> member function to update the pointer and counter. Finally, print out all <b>Person</b> objects, listing the name, best friend, and popularity counter for each.</p>
            <br>
            <h5>Sample Output</h5>
            <img src="https://raw.githubusercontent.com/wonjunee/pic10b/master/pointer_ex_sample_output.png" alt="formula random" width="304" height="228">

            <h5>Solution</h5>
            <pre class="prettyprint lang-cpp" style="font-size: 8.5pt;">
#include < iostream >
#include < vector >
#include < string >

using namespace std;

class Person
{
public:
  Person();
  Person(string pname);

  string get_name() const;
  Person* get_best_friend() const;
  int get_popularity() const;

  void set_best_friend(Person* someone);
  void add_popularity();

private:
  string name;
  Person* best_friend;
  int popularity;
};

Person::Person():name(""), best_friend(NULL), popularity(0) {}

Person::Person(string pname):name(pname), best_friend(NULL), popularity(0) {}

string Person::get_name() const
{
  return name;
}

Person* Person::get_best_friend() const
{
  return best_friend;
}

int Person::get_popularity() const
{
  return popularity;
}

void Person::add_popularity()
{
  popularity++;
}

void Person::set_best_friend(Person* someone)
{
  someone->add_popularity();
  best_friend = someone;
}

int main()
{
  vector< Person* > person_list;

  while(true)
  {
    cout << "Type name (Q to quit) : ";
    string name;
    cin >> name;

    if(name == "Q") break;

    Person* new_person = new Person(name);
    person_list.push_back(new_person);
  }

  for(int i = 0; i < person_list.size(); ++i)
  {
    cout << person_list[i]->get_name() << "'s best friend? : ";
    string name;
    cin >> name;

    for(int j = 0; j < person_list.size(); ++j)
    {
      if(name == person_list[j]->get_name())
      {
        person_list[i]->set_best_friend(person_list[j]);
        break;
      }
    }
  }

  for(int i = 0; i < person_list.size(); ++i)
  {
    string name = person_list[i]->get_name();
    string best_friend_name = person_list[i]->get_best_friend()->get_name();
    int popularity = person_list[i]->get_popularity();
    cout << name << "'s best friend is " << best_friend_name << " and popularity is " << popularity << endl;
  }

  // Delete pointers
  for(int i = 0; i < person_list.size(); ++i)
  {
    delete person_list[i];
  }

}
            </pre>
        </div>

        <div class="col-sm-1"></div>
    </div>
</div>

<div class=empty-row-1> </div>
