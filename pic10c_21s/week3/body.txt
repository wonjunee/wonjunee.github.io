  <div class="container bg-3 text-left">
    <h3>Week3</h3>  
  </div>

  <div class=empty-row-1> </div>

  <div class="container bg-3 text-left">
    <h4>Tuesday</h4>
    <h5>Filesystem</h5>
    <p>Opening files from the directories</p>
  </div>
  <div class="container bg-3 text-left">
      <pre class="prettyprint lang-cpp">
#include < iostream >
#include < filesystem >
#include < vector >
#include < fstream >

namespace fs = std::filesystem;

int main(){

    // Getting all the files in the directory "submissions"
    std::vector< std::string > filenames;
    fs::directory_iterator iter("./submissions");

    for(const auto& p : iter){
        if(p.is_directory()){
            fs::directory_iterator iter2(p.path().string());
            for(const auto& p2 : iter2){
                if(p2.is_regular_file()) {
                    std::cout << "\tfile: " << p2.path() << " under the directory " << p.path().string() << '\n';
                    filenames.push_back(p2.path());
                }
            }
        }
    }

    // Read one file from filenames vector.
    std::string out = "";
    std::string line = "";

    std::ifstream myfile(filenames[0]);

    if(myfile.is_open()){
        while(getline(myfile, line)){
            out += line;
            out += '\n';
        }
        myfile.close();
    }

    std::cout << filenames[0] << '\n';
    std::cout << out << std::endl;
}

      </pre>
  </div>

  <div class=empty-row-1> </div>

  <div class="container bg-3 text-left">

    <h5>Finding the longest subsequence</h5>
  </div>


  <div class="container bg-3 text-left">
      <pre class="prettyprint lang-cpp">
#include < iostream >

using namespace std;

int main(){

    string a = " ABCYZB";
    string b = " ABZBC";

    int n1 = a.length(); // 6
    int n2 = b.length(); // 5
    int** count = new int*[n2];
    for(int i=0;i < n2;++i){
        count[i] = new int[n1];
    }

    // set the first row and first col to be one

    // i <- row index
    // j <- col index
    for(int i=0;i < n2;++i){
        count[i][0] = 1;
    }

    for(int j=0; j < n1;++j){
        count[0][j] = 1;
    }

    for(int i=1;i < n2;++i){
        for(int j=1; j < n1;++j){
            if( a[j] != b[i] ){
                count[i][j] = fmax(count[i][j-1], count[i-1][j]);
            }else{
                count[i][j] = 1 + count[i-1][j-1];
            }
        }
    }

    // backtracking
    int i = n2-1;
    int j = n1-1;
    string longest_sub = "";

    while(i>=0 && j>=0){
        if(a[j] == b[i]){
            longest_sub = a[j] + longest_sub;
            i = i - 1;
            j = j - 1;
        }else{
            if(count[i][j-1] > count[i-1][j]){
                j = j - 1;
            }else{
                i = i - 1;
            }
        }
    }

    cout << "longest_sub : " << longest_sub << '\n';


    for(int i=0;i < n2;++i){
        for(int j=0; j < n1;++j){
            cout << count[i][j] << " ";
        }
        cout << '\n';
    }

    return 0;
}



      </pre>
  </div>

  <div class=empty-row-1> </div>
